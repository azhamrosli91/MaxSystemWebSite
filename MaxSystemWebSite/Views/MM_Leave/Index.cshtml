@using MaxSystemWebSite.Models.MM;
@model MM_LEAVE_VM;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    Layout = "~/Views/Shared/_Layout_new.cshtml";

    var username = HttpContextAccessor.HttpContext.Request.Cookies["NAME"];
    var userID = HttpContextAccessor.HttpContext.Request.Cookies["USER_ID"];
}

<style>
    .content {
        display: flex;
        flex-direction: column;
        height: 100vh;
        padding-bottom: 2.5rem;
    }

    #appCalendar {
        height: unset !important;
        min-height: 0;
        flex-grow: 1;
    }

    .holiday-label.fc-daygrid-event {
        border-color: #3E424B !important;
        background-color: #3E424B !important;
    }

        .holiday-label .fc-event-title {
            color: #fff;
            font-weight: bold !important;
        }

        .holiday-label.fc-daygrid-event .fc-event-main {
            padding-left: 20px;
        }
        .holiday-label.fc-daygrid-event .fc-event-main::before {
            content: ""; /* Coconut tree emoji */
            position: absolute;
            left: 0px;
            top: 50%;
            transform: translateY(-50%);
            display: inline-block;
            margin-top: -1px;
            margin-right: 4px;
            font-size: 14px; /* Adjust as needed */
            width: 16px;
            height: 16px;
            border: none; /* Remove previous styling */

            background-image: url('/Images/icons/palm_tree.png');
            background-size: cover;
            background-repeat: no-repeat;
        }

        .holiday-label.fc-daygrid-event .fc-event-main::after {
            display: none !important;
        }

    .event-annual .fc-event-main::after {
        border-color: #ffc107 !important; /* yellow – annual/vacation leave */
    }

    .event-unpaid .fc-event-main::after {
        border-color: #6c757d !important; /* gray – unpaid leave */
    }

    .event-medical .fc-event-main::after {
        border-color: #28a745 !important; /* green – regular medical leave */
    }

    .event-hospitalization .fc-event-main::after {
        border-color: #20c997 !important; /* teal – hospitalization (stronger medical) */
    }

    .event-maternity .fc-event-main::after {
        border-color: #e83e8c !important; /* pink – maternity leave */
    }

    .event-paternity .fc-event-main::after {
        border-color: #6610f2 !important; /* purple – paternity leave */
    }

    .event-marriage .fc-event-main::after {
        border-color: #fd7e14 !important; /* orange – marriage leave (festive) */
    }

    .event-compassionate .fc-event-main::after {
        border-color: #dc3545 !important; /* red – compassionate leave (serious/emergency) */
    }

    .event-convocation .fc-event-main::after {
        border-color: #17a2b8 !important; /* cyan – convocation (educational event) */
    }

    .event-default .fc-event-main::after {
        border-color: #343a40 !important; /* dark gray */
    }

    #btnRefresh.refreshing svg {
        color: blue;
        animation: fa-spin 1s linear infinite;
    }


    /* Customize popover to show the table properly */
    #btnLegend:hover {
        color: grey;
        cursor: pointer;
    }

    .msc-legend {
        display: flex;
        flex-direction: column;
    }

    .msc-legend-row {
        display: flex;
    }

    .msc-legend-label {
        width: 14px;
        height: 14px;
        flex-shrink: 0;
        margin-right: 5px;
        border-radius: 50%;
        margin-top: 1px;
    }

        .msc-legend-label.event-annual {
            background: #ffc107 !important; /* yellow – annual/vacation leave */
        }

        .msc-legend-label.event-unpaid {
            background: #6c757d !important; /* gray – unpaid leave */
        }

        .msc-legend-label.event-medical {
            background: #28a745 !important; /* green – regular medical leave */
        }

        .msc-legend-label.event-hospitalization {
            background: #20c997 !important; /* teal – hospitalization (stronger medical) */
        }

        .msc-legend-label.event-maternity {
            background: #e83e8c !important; /* pink – maternity leave */
        }

        .msc-legend-label.event-paternity {
            background: #6610f2 !important; /* purple – paternity leave */
        }

        .msc-legend-label.event-marriage {
            background: #fd7e14 !important; /* orange – marriage leave (festive) */
        }

        .msc-legend-label.event-compassionate {
            background: #dc3545 !important; /* red – compassionate leave (serious/emergency) */
        }

        .msc-legend-label.event-convocation {
            background: #17a2b8 !important; /* cyan – convocation (educational event) */
        }

        .msc-legend-label.event-default {
            background: #343a40 !important; /* dark gray */
        }

        .msc-legend-label.event-holiday {
            border-radius: unset;
            background-image: url('/Images/icons/palm_tree.png');
            background-size: cover;
            background-repeat: no-repeat;
        }

</style>



<div class="row g-0 mb-4 align-items-center">
    <div class="col-5 col-md-6">
        <h4 class="mb-0 text-body-emphasis fw-bold fs-md-6">
            <span class="calendar-day d-block d-md-inline mb-1"></span><span class="px-3 fw-thin text-body-quaternary d-none d-md-inline">|</span><span class="calendar-date"></span>
            <span id="btnLegend" class="ms-2"><i class="fa-solid fa-info-circle"></i></span>
        </h4>
    </div>
    <div class="col-7 col-md-6 d-flex justify-content-end">
        <button class="btn btn-link text-body px-0 me-2 me-md-4" id="btnRefresh"><i class="me-2"><span class="fa-solid fa-sync fs-10"></span></i><span class="d-none d-md-inline">Sync Now</span></button>
        <button class="btn btn-primary btn-sm" type="button" data-bs-toggle="modal" data-bs-target="#addEventModal"> <span class="fas fa-plus pe-2 fs-10"></span>Apply Leave </button>
    </div>
</div>
<div class="mx-n4 px-4 mx-lg-n6 px-lg-6 border-y border-translucent">
    <div class="row py-3 gy-3 gx-0">
        <div class="col-6 col-md-4 order-1 d-flex align-items-center">
            <button class="btn btn-sm btn-phoenix-primary px-4" data-event="today">Today</button>
        </div>
        <div class="col-12 col-md-4 order-md-1 d-flex align-items-center justify-content-center">
            <button class="btn icon-item icon-item-sm shadow-none text-body-emphasis p-0" type="button" data-event="prev" title="Previous"><span class="fas fa-chevron-left"></span></button>
            <h3 class="px-3 text-body-emphasis fw-semibold calendar-title mb-0"> </h3>
            <button class="btn icon-item icon-item-sm shadow-none text-body-emphasis p-0" type="button" data-event="next" title="Next"><span class="fas fa-chevron-right"></span></button>
        </div>
        <div class="col-6 col-md-4 ms-auto order-1 d-flex justify-content-end">
            <div>
                <div class="btn-group btn-group-sm" role="group">
                    <button class="btn btn-phoenix-secondary active-view" data-fc-view="dayGridMonth">Month</button>
                    <button class="btn btn-phoenix-secondary" data-fc-view="dayGridWeek">Week</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="calendar-outline mt-6" id="appCalendar"></div>


<!--MODAL-->
<div class="modal fade" id="eventDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border border-translucent"></div>
    </div>
</div>
<div class="modal fade" id="addEventModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content border border-translucent">
            <form id="addEventForm" class="needs-validation" autocomplete="off" novalidate>
                <div class="modal-header px-card border-0">
                    <div class="w-100 d-flex justify-content-end align-items-start">
                        <button class="btn p-1 fs-10 text-body" type="button" data-bs-dismiss="modal" aria-label="Close">DISCARD </button>
                    </div>
                </div>
                <div class="modal-body p-card py-0">
                    <div class="form-floating mb-3">
                        <input class="form-control" id="txtName" type="text" required="required" placeholder="Name" value="@username" readonly />
                        <label for="txtName">Name</label>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-floating mb-3">
                        <input class="form-control" id="txtEmpNo" type="text" required="required" placeholder="Employee Number" value="@userID" readonly />
                        <label for="txtEmpNo">Employee Number</label>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-floating mb-3">
                        @Html.DropDownListFor(Model => Model.EMP_MANAGER, new SelectList(Model.DDL_MANAGER, "SA_EMAIL", "SA_NAME"), new { id = "ddlManager", @class = "form-select", @required="required" })
                        @* <select class="form-select" id="ddlManager" required="required">
                            <option value="1" selected="selected">Azham</option>
                        </select> *@
                        <label for="ddlManager">Business Unit Manager/Supervisor Name</label>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-floating mb-3">
                        <input class="form-control" id="txtManagerEmail" type="text" required="required" placeholder="Business Unit Manager/Supervisor Email Address" value="" readonly />
                        <label for="txtManagerEmail">Business Unit Manager/Supervisor Email Address</label>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-floating mb-3">
                        <select class="form-select" id="ddlLeaveType" name="label">
                            <option value="Annual Leave" selected="selected">Annual Leave</option>
                            <option value="Unpaid Leave">Unpaid Leave</option>
                            <option value="Medical Leave">Medical Leave</option>
                            <option value="Hospitalization Leave">Hospitalization Leave</option>
                            <option value="Maternity Leave">Maternity Leave</option>
                            <option value="Paternity Leave">Paternity Leave</option>
                            <option value="Marriage Leave">Marriage Leave</option>
                            <option value="Compassionate Leave">Compassionate Leave</option>
                            <option value="Convocation Leave">Convocation Leave</option>
                        </select>
                        <label for="ddlLeaveType">Leave Type</label>
                    </div>
                    <div class="form-floating mb-3">
                        <select class="form-select" id="ddlHalfDay" name="label">
                            <option value="0" selected="selected">No</option>
                            <option value="1">Yes</option>
                        </select>
                        <label for="ddlHalfDay">Apply Half Day Leave?</label>
                    </div>
                    <div class="row g-3">
                        <div class="col-sm-6">
                            <div class="flatpickr-input-container mb-3">
                                <div class="form-floating">
                                    <input class="form-control datetimepicker isResetable" id="txtStartDate" type="text" required="required" placeholder="yyyy/mm/dd" data-options='{"disableMobile":true,"enableTime":"false","dateFormat":"Y-m-d"}' /><span class="uil uil-calendar-alt flatpickr-icon text-body-tertiary"></span>
                                    <label class="ps-6" for="txtStartDate">Starts at</label>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="flatpickr-input-container mb-3">
                                <div class="form-floating">
                                    <input class="form-control datetimepicker isResetable" id="txtEndDate" type="text" required="required" placeholder="yyyy/mm/dd" data-options='{"disableMobile":true,"enableTime":"false","dateFormat":"Y-m-d"}' /><span class="uil uil-calendar-alt flatpickr-icon text-body-tertiary"></span>
                                    <label class="ps-6" for="txtEndDate">Ends at</label>
                                    <div class="invalid-feedback"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-floating mb-3">
                        <input class="form-control isResetable" id="txtDays" type="text" placeholder="Days Applied" readonly />
                        <label for="txtDays">Days Applied</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input class="form-control isResetable" id="txtJustification" type="text" required="required" placeholder="Justification for Leave" />
                        <label for="txtJustification">Justification for Leave</label>
                        <div class="invalid-feedback">Please provide a reason.</div>
                    </div>
                    <div class="form-floating mb-1">
                        <input class="form-control isResetable" id="txtEmailCC" type="text" placeholder="Add Person to CC in Mail" />
                        <label for="txtEmailCC">Add Person to CC in Mail</label>
                    </div>
                    <div class="small mb-3">Use ; to separate more than 1 email. The email will automatically include HR email.</div>
                </div>
                <div class="modal-footer d-flex justify-content-end align-items-center border-0">
                    <button class="btn btn-primary px-4" type="button" id="btnSubmit">Apply Leave</button>
                </div>
            </form>
        </div>
    </div>
</div>



@section Scripts {

    <script src="~/vendor/fullcalendar/index.global.min.js"></script>

    <script>
        const email = $("#txtuseremail").val(); // Replace with dynamic value if needed
        loadUserProfile(email);

        function loadUserProfile(email) {
            $.ajax({
                url: `/MM_UserProfile/GetProfileDetail?email=${encodeURIComponent(email)}`,
                method: 'GET',
                success: function (response) {
                    if (response.success && response.data)
                    {
                        if (response.success)
                        {
                            $('#txtName').val(response.data.EMP_NAME);
                            $('#txtEmpNo').val(response.data.EMP_NO);
                            $('#ddlManager').val(response.data.TMS_MANAGER);
                            $('#txtManagerEmail').val(response.data.TMS_MANAGER);
                        }
                        else
                        {
                            console.error("Failed to load profile:", response.msg);
                        }

                    } else {
                        console.error("Failed to load profile:", response.msg);
                    }
                },
                error: function (xhr) {
                    console.error("Error fetching profile:", xhr);
                }
            });
        }
    </script>

    <script>
        let ms_calendar;
        var holiday_data = [];

        $(document).ready(function(){
            fetchLeaveData();

            $('#btnRefresh').click(function(){
                fetchLeaveData();
            });

            // Initialize popover when the button is clicked or hovered
            $('#btnLegend').popover({
              trigger: 'hover click',  // Show popover on hover
              html: true,        // Allow HTML content inside popover
              placement: "bottom",
              content: function() {
                return `
                    <div class="msc-legend">
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-annual"></div>
                            <div class="msc-legend-text">Annual Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-unpaid"></div>
                            <div class="msc-legend-text">Unpaid Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-medical"></div>
                            <div class="msc-legend-text">Medical Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-hospitalization"></div>
                            <div class="msc-legend-text">Hospitalization Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-maternity"></div>
                            <div class="msc-legend-text">Maternity Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-paternity"></div>
                            <div class="msc-legend-text">Paternity Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-marriage"></div>
                            <div class="msc-legend-text">Marriage Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-compassionate"></div>
                            <div class="msc-legend-text">Compassionate Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-convocation"></div>
                            <div class="msc-legend-text">Convocation Leave</div>
                        </div>
                        <div class="msc-legend-row">
                            <div class="msc-legend-label event-holiday"></div>
                            <div class="msc-legend-text">Public Holiday</div>
                        </div>
                    </div>`;
              }
            });

        });


        //Sample Data
        const { dayjs } = window;
        const currentDay = dayjs && dayjs().format('DD');
        const currentMonth = dayjs && dayjs().format('MM');
        const prevMonth = dayjs && dayjs().subtract(1, 'month').format('MM');
        const nextMonth = dayjs && dayjs().add(1, 'month').format('MM');
        const currentYear = dayjs && dayjs().format('YYYY');



        function fetchLeaveData() {
          $.ajax({
            url: '/MM_Leave/GetCalendarData', // Change to your actual route
            method: 'GET',
            beforeSend: function(){
                $('#btnRefresh').addClass('refreshing');
            },
            success: function (response) {
                $('#btnRefresh').removeClass('refreshing');
                if (response.success) {
                    const hData = response.h_data.map(item => ({
                      ...item,
                      title: item.HOLIDAY_NAME,
                      start: dayjs(item.DATE_START).format('YYYY-MM-DD'),
                      end: dayjs(item.DATE_END).add(1, 'day').format('YYYY-MM-DD'), //Add 1 day FCJS treat is as before
                      classNames: ["holiday-label"]
                    }));
                    holiday_data = hData;

                    const lData = response.l_data.map(item => ({
                      ...item,
                      title: item.EMP_NAME,
                      start: dayjs(item.DATE_START).format('YYYY-MM-DD'),
                      end: dayjs(item.DATE_END).add(1, 'day').format('YYYY-MM-DD'), //Add 1 day FCJS treat is as before
                      classNames: [getEventDotClass(item.TYPE_LEAVE)]
                    }));

                    const combinedData = [...hData, ...lData];

                    //console.log(combinedData);

                    ms_calendar.removeAllEvents();
                    ms_calendar.addEventSource(combinedData);

                    if (response.msg != "") {
                        toastMessage(response.msg, 'warning');
                    }
                } else {
                    toastMessage(response.msg, 'error');
                }
            },
            error: function () {
              console.error('Failed to load events.');
            }
          });
        }

        function getEventDotClass(type) {
          switch (type.toLowerCase()) {
            case 'annual leave':
              return 'event-annual';
            case 'unpaid leave':
              return 'event-unpaid';
            case 'medical leave':
              return 'event-medical';
            case 'hospitalization leave':
              return 'event-hospitalization';
            case 'maternity leave':
              return 'event-maternity';
            case 'paternity leave':
              return 'event-paternity';
            case 'marriage leave':
              return 'event-marriage';
            case 'compassionate leave':
              return 'event-compassionate';
            case 'convocation leave':
              return 'event-convocation';
            default:
              return 'event-default';
          }
        }


        (function (factory) {
          typeof define === 'function' && define.amd ? define(factory) :
          factory();
        })((function () { 'use strict';

          /* -------------------------------------------------------------------------- */

          const camelize = str => {
            const text = str.replace(/[-_\s.]+(.)?/g, (_, c) =>
              c ? c.toUpperCase() : ''
            );
            return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;
          };

          const getData = (el, data) => {
            try {
              return JSON.parse(el.dataset[camelize(data)]);
            } catch (e) {
              return el.dataset[camelize(data)];
            }
          };

          /* -------------------------------------------------------------------------- */
          /*                                   Calendar                                 */

          /* -------------------------------------------------------------------------- */
          const renderCalendar = (el, option) => {
            const { merge } = window._;

            const options = merge(
              {
                initialView: 'dayGridMonth',
                editable: true,
                direction: document.querySelector('html').getAttribute('dir'),
                headerToolbar: {
                  left: 'prev,next today',
                  center: 'title',
                  right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                buttonText: {
                  month: 'Month',
                  week: 'Week',
                  day: 'Day'
                }
              },
              option
            );
            const calendar = new window.FullCalendar.Calendar(el, options);
            calendar.render();
            document
              .querySelector('.navbar-vertical-toggle')
              ?.addEventListener('navbar.vertical.toggle', () => calendar.updateSize());
            return calendar;
          };

          const fullCalendarInit = () => {
            const { getData } = window.phoenix.utils;

            const calendars = document.querySelectorAll('[data-calendar]');
            calendars.forEach(item => {
              const options = getData(item, 'calendar');
              renderCalendar(item, options);
            });
          };

          const fullCalendar = {
            renderCalendar,
            fullCalendarInit
          };


          const getTemplate = event => `
            <div class="modal-header ps-card border-bottom border-translucent justify-content-between">
              <div>
                <h4 class="modal-title text-1000 mb-0">${event.title}
                    ${(event.extendedProps.EMP_EMAIL || event.extendedProps.EMP_NO)
                        ? `<br><span class="small">${event.extendedProps.EMP_EMAIL ? event.extendedProps.EMP_EMAIL : ''} ${event.extendedProps.EMP_NO ? `(${event.extendedProps.EMP_NO})` : ''}</span>`
                        : ''
                    }
                </h4>
              </div>
              <button type="button" class="btn p-1 fw-bolder" data-bs-dismiss="modal" aria-label="Close">
                <span class='fas fa-times fs-0'></span>
              </button>
            </div>

            <div class="modal-body px-card pb-card pt-1 fs--1">
              ${
                event.extendedProps.TYPE_LEAVE
                  ? `
                  <div class="mt-3 border-bottom pb-3">
                    <h5 class='mb-0 text-800'>Type of Leave</h5>
                    <p class="mb-0 mt-2">
                      ${event.extendedProps.TYPE_LEAVE}
                    </p>
                  </div>
                `
                  : ''
              }
              <div class="mt-4 ${event.extendedProps.APPROVER ? 'border-bottom pb-3' : ''}">
                <h5 class='mb-0 text-800'>Date (Duration)</h5>
                <p class="mb-1 mt-2">
                    ${
                      window.dayjs &&
                      window.dayjs(event.start).format('dddd, MMMM D, YYYY')
                    }
                    ${
                      event.end &&
                      window.dayjs(event.start).format('YYYY-MM-DD') !== window.dayjs(event.end).subtract(1, 'day').format('YYYY-MM-DD')
                        ? `– ${
                            window.dayjs &&
                            window
                              .dayjs(event.end)
                              .subtract(1, 'day')
                              .format('dddd, MMMM D, YYYY')
                          }`
                        : ''
                    }
                    ${
                        event.extendedProps.NUMBER_OF_HOLIDAY
                        ? `
                            ${
                                event.extendedProps.NUMBER_OF_HOLIDAY > 1
                                ?
                                `(${event.extendedProps.NUMBER_OF_HOLIDAY} days)`
                                :
                                `(${event.extendedProps.NUMBER_OF_HOLIDAY} day)`
                            }
                          `
                        :
                        ''
                    }
                    ${
                        event.extendedProps.NUMBER_OF_LEAVE
                        ? `
                            ${
                                event.extendedProps.NUMBER_OF_LEAVE > 1
                                ?
                                `(${event.extendedProps.NUMBER_OF_LEAVE} days)`
                                :
                                `(${event.extendedProps.NUMBER_OF_LEAVE} day)`
                            }
                          `
                        :
                        ''
                    }
               </p>
              </div>
              ${
                event.extendedProps.APPROVER
                  ? `
                    <div class="mt-4 ">
                      <h5 class='mb-0 text-800'>Approved By</h5>
                      <p class="mb-0 mt-2">${event.extendedProps.APPROVER}</p
                      <p class="mb-0 mt-1">
                        ${
                            event.extendedProps.APPROVER_DATE 
                            ? `<span class="fw-bold">On</span> ${(
                                window.dayjs &&
                                window.dayjs(event.extendedProps.APPROVER_DATE).format('dddd, MMMM D, YYYY')
                            )}` : ''
                        }
                      </p>
                    </div>
                  `
                  : ''
              }
              </div>
            </div>
        `;

          /*-----------------------------------------------
          |   Calendar
          -----------------------------------------------*/
          const appCalendarInit = () => {
            const Selectors = {
              ACTIVE: '.active',
              ADD_EVENT_FORM: '#addEventForm',
              //ADD_EVENT_MODAL: '#addEventModal',
              CALENDAR: '#appCalendar',
              CALENDAR_TITLE: '.calendar-title',
              CALENDAR_DAY: '.calendar-day',
              CALENDAR_DATE: '.calendar-date',
              DATA_CALENDAR_VIEW: '[data-fc-view]',
              DATA_EVENT: '[data-event]',
              DATA_VIEW_TITLE: '[data-view-title]',
              EVENT_DETAILS_MODAL: '#eventDetailsModal',
              EVENT_DETAILS_MODAL_CONTENT: '#eventDetailsModal .modal-content',
              EVENT_START_DATE: '#addEventModal [name="startDate"]',
              INPUT_TITLE: '[name="title"]'
            };

            const Events = {
              CLICK: 'click',
              SHOWN_BS_MODAL: 'shown.bs.modal',
              SUBMIT: 'submit'
            };

            const DataKeys = {
              EVENT: 'event',
              FC_VIEW: 'fc-view'
            };


            const updateDay = day => {
              const days = [
                'Sunday',
                'Monday',
                'Tuesday',
                'Wednesday',
                'Thursday',
                'Friday',
                'Saturday'
              ];
              return days[day];
            };

            const setCurrentDate = () => {
              const dateObj = new Date();
              const month = dateObj.toLocaleString('en-US', { month: 'short' });
              const date = dateObj.getDate(); // return date number
              const day = dateObj.getDay(); // return week day number
              const year = dateObj.getFullYear();
              const newdate = `${date}  ${month},  ${year}`;
              if (document.querySelector(Selectors.CALENDAR_DAY)) {
                document.querySelector(Selectors.CALENDAR_DAY).textContent =
                  updateDay(day);
              }
              if (document.querySelector(Selectors.CALENDAR_DATE)) {
                document.querySelector(Selectors.CALENDAR_DATE).textContent = newdate;
              }
            };
            setCurrentDate();

            const updateTitle = currentData => {
              const { currentViewType } = currentData;
              // week view
              if (currentViewType === 'timeGridWeek') {
                const weekStartsDate = currentData.dateProfile.currentRange.start;
                const startingMonth = weekStartsDate.toLocaleString('en-US', {
                  month: 'short'
                });
                const startingDate = weekStartsDate.getDate();
                const weekEndDate = currentData.dateProfile.currentRange.end;

                const endingMonth = weekEndDate.toLocaleString('en-US', {
                  month: 'short'
                });
                const endingDate = weekEndDate.getDate();

                document.querySelector(
                  Selectors.CALENDAR_TITLE
                ).textContent = `${startingMonth} ${startingDate} - ${endingMonth} ${endingDate}`;
              } else
                document.querySelector(Selectors.CALENDAR_TITLE).textContent =
                  currentData.viewTitle;
            };

            const appCalendar = document.querySelector(Selectors.CALENDAR);
            const addEventForm = document.querySelector(Selectors.ADD_EVENT_FORM);
            //const addEventModal = document.querySelector(Selectors.ADD_EVENT_MODAL);
            const eventDetailsModal = document.querySelector(
              Selectors.EVENT_DETAILS_MODAL
            );

            if (appCalendar) {
              ms_calendar = fullCalendar.renderCalendar(appCalendar, {
                headerToolbar: false,
                dayMaxEvents: 3,
                //height: 800,
                stickyHeaderDates: false,
                views: {
                  week: {
                    eventLimit: 3
                  }
                },
                eventTimeFormat: {
                  hour: 'numeric',
                  minute: '2-digit',
                  omitZeroMinute: true,
                  meridiem: true
                },
                events: [],
                eventDidMount: function(info) {
                  if (info.event.classNames.includes("holiday-label")) {
                    const start = dayjs(info.event.start);
                    const end = dayjs(info.event.end || info.event.start);
                    //console.log(info.event);

                    let current = start.clone();
                    while (current.isBefore(end, 'day')) {
                        const dateStr = current.format('YYYY-MM-DD');
                        const cell = document.querySelector(`.fc-daygrid-day[data-date="${dateStr}"]`);
                        if (cell) {
                            cell.style.backgroundColor = '#828282';
                            cell.style.color = 'black';
                            cell.style.border = 'none';
                            cell.style.textAlign = 'center';
                        }
                        current = current.add(1, 'day');
                    }
                  }
                },
                eventClick: info => {
                  if (info.event.url) {
                    window.open(info.event.url, '_blank');
                    info.jsEvent.preventDefault();
                  } else {
                    const template = getTemplate(info.event);
                    //console.log(info);
                    document.querySelector(
                      Selectors.EVENT_DETAILS_MODAL_CONTENT
                    ).innerHTML = template;
                    const modal = new window.bootstrap.Modal(eventDetailsModal);
                    modal.show();
                  }
                },
                dateClick(info) {
                  //const modal = new window.bootstrap.Modal(addEventModal);
                  //modal.show();
                  /* eslint-disable-next-line */
                  //const flatpickr = document.querySelector(Selectors.EVENT_START_DATE)._flatpickr;
                  //flatpickr.setDate([info.dateStr]);
                }
              });

              updateTitle(ms_calendar.currentData);

              document.querySelectorAll(Selectors.DATA_EVENT).forEach(button => {
                button.addEventListener(Events.CLICK, e => {
                  const el = e.currentTarget;
                  const type = getData(el, DataKeys.EVENT);
                  switch (type) {
                    case 'prev':
                      ms_calendar.prev();
                      updateTitle(ms_calendar.currentData);
                      break;
                    case 'next':
                      ms_calendar.next();
                      updateTitle(ms_calendar.currentData);
                      break;
                    case 'today':
                      ms_calendar.today();
                      updateTitle(ms_calendar.currentData);
                      break;
                    default:
                      ms_calendar.today();
                      updateTitle(ms_calendar.currentData);
                      break;
                  }
                });
              });

              document.querySelectorAll(Selectors.DATA_CALENDAR_VIEW).forEach(link => {
                link.addEventListener(Events.CLICK, e => {
                  e.preventDefault();
                  const el = e.currentTarget;
                  const newView = getData(el, DataKeys.FC_VIEW);

                  ms_calendar.changeView(newView);
                  updateTitle(ms_calendar.currentData);

                  if (newView === 'dayGridWeek') {
                    ms_calendar.setOption('dayMaxEvents', false); // disable
                  } else {
                    ms_calendar.setOption('dayMaxEvents', 3); // restore default
                  }

                  document.querySelectorAll(Selectors.DATA_CALENDAR_VIEW).forEach(btn => {
                    btn.classList.remove('active-view');
                  });
                  el.classList.add('active-view');
                });
              });

              // if (addEventForm) {
              //   addEventForm.addEventListener(Events.SUBMIT, e => {
              //     e.preventDefault();
              //     const { title, startDate, endDate, label, description, allDay } =
              //       e.target;
              //     ms_calendar.addEvent({
              //       title: title.value,
              //       start: startDate.value,
              //       end: endDate.value ? endDate.value : null,
              //       allDay: allDay.checked,
              //       className: `text-${label.value}`,
              //       description: description.value
              //     });
              //     e.target.reset();
              //     window.bootstrap.Modal.getInstance(addEventModal).hide();
              //   });
              // }

              // if (addEventModal) {
              //   addEventModal.addEventListener(
              //     Events.SHOWN_BS_MODAL,
              //     ({ currentTarget }) => {
              //       currentTarget.querySelector(Selectors.INPUT_TITLE)?.focus();
              //     }
              //   );
              // }
            }
          };

          const { docReady } = window.phoenix.utils;

          docReady(appCalendarInit);

        }));
        //# sourceMappingURL=calendar.js.map

    </script>

    <script>
        //Apply Leave Control
        $(document).ready(function () {

            $('#ddlManager').change(function(){
                $('#txtManagerEmail').val($(this).val());
            });


            var $startInput = $("#txtStartDate");
            var $endInput = $("#txtEndDate");

            // Flatpickr instances
            var startPicker = $startInput.flatpickr({
              disableMobile: true,
              dateFormat: "Y-m-d",
              onChange: function (selectedDates, dateStr) {
                if (selectedDates.length > 0) {
                  endPicker.set("minDate", dateStr);
                  // If end date is before start, clear it
                  if ($endInput.val() && dayjs($endInput.val()).isBefore(dateStr)) {
                    $endInput.val("");
                  }
                }
                $('#txtDays').val(getDayDifferenceExcludingWeekendsAndHolidays($startInput.val(), $endInput.val()));
              }
            });

            var endPicker = $endInput.flatpickr({
              disableMobile: true,
              dateFormat: "Y-m-d",
              onChange: function (selectedDates, dateStr) {
                if (selectedDates.length > 0) {
                  startPicker.set("maxDate", dateStr);
                  // If start date is after end, clear it
                  if ($startInput.val() && dayjs($startInput.val()).isAfter(dateStr)) {
                    $startInput.val("");
                  }
                }
                $('#txtDays').val(getDayDifferenceExcludingWeekendsAndHolidays($startInput.val(), $endInput.val()));
              }
            });

            $('#btnSubmit').click(function(){
                submitForm();
            });
        });

        function getDayDifferenceExcludingWeekendsAndHolidays(startDateStr, endDateStr) {
            if (!startDateStr) return '';   // Start date empty → return ''
            if (!endDateStr) endDateStr = startDateStr; // End date empty → assume same day

            const start = new Date(dayjs(startDateStr).format('YYYY-MM-DD'));
            const end = new Date(dayjs(endDateStr).format('YYYY-MM-DD'));

            // Normalize to remove time portion
            start.setHours(0, 0, 0, 0);
            end.setHours(0, 0, 0, 0);

            // Convert holidays into Set of strings: 'YYYY-MM-DD'
            const holidayDates = new Set();
            holiday_data.forEach(holiday => {
                const startH = new Date(holiday.start);
                const endH = new Date(holiday.end);
                for (
                    let d = new Date(startH);
                    d < endH;  // 'end' is exclusive due to +1 in your map
                    d.setDate(d.getDate() + 1)
                ) {
                    holidayDates.add(d.toISOString().slice(0, 10));
                }
            });

            // Count valid days
            let count = 0;
            for (
                let d = new Date(start);
                d <= end;
                d.setDate(d.getDate() + 1)
            ) {
                const dayOfWeek = d.getDay(); // 0=Sun, 6=Sat
                const dateStr = dayjs(d).format('YYYY-MM-DD');
                if (dayOfWeek !== 0 && dayOfWeek !== 6 && !holidayDates.has(dateStr)) {
                    console.log(dateStr);
                    count++;
                }
            }
            return count;
        }

        $('#addEventModal').on('hidden.bs.modal', function () {
            $('#addEventModal .needs-validation').removeClass('was-validated');
            $('#addEventModal .is-invalid').removeClass('is-invalid');

            $('#addEventForm .isResetable').each(function () {
                $(this).val('');
            });
        });

        $(document).on('change', '[required]', function(){
            $(this).removeClass('is-invalid');
        });

        function submitForm() {
            var cont = true;
            var message = "";

            $('#addEventModal .needs-validation').addClass('was-validated');
            $('#addEventModal .is-invalid').removeClass('is-invalid');

            $('#addEventForm [required]').each(function () {
                if (!$(this).val()) {
                    cont = false;
                    message = "Field cannot be empty.";

                    $(this).addClass('is-invalid');
                    $(this).parent().find('.invalid-feedback').text(message);
                }
            });

            if (cont) {

                var data = {
                    EMP_NAME: $('#txtName').val().trim(),
                    EMP_NO: $('#txtEmpNo').val().trim(),
                    MANAGER_NAME: $('#ddlManager option:selected').text().trim(),
                    MANAGER_EMAIL: $('#txtManagerEmail').val().trim(),
                    LEAVE_TYPE: $('#ddlLeaveType').val().trim(),
                    IS_HALF_DAY: $('#ddlHalfDay').val().trim(),
                    DATE_FROM: $('#txtStartDate').val().trim(),
                    DATE_TO: $('#txtEndDate').val().trim(),
                    DAYS_APPLIED: $('#txtDays').val().trim(),
                    JUSTIFICATION: $('#txtJustification').val().trim(),
                    EMAIL_CC: $('#txtEmailCC').val().trim()
                };

                $.ajax({
                    url: '/MM_Leave/ExecuteApplyLeave',
                    type: 'POST',
                    data: data,
                    beforeSend: function () {
                        loadings();
                    },
                    success: function (response) {
                        if (!response.error) {
                            toastMessage("Data save successfully", 'success');
                            $('#addEventModal').modal('hide');
                        } else {
                            loadings(false);
                            toastMessage(response.msg, 'error');
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 400) {
                            location.href = system_logout_url;
                        } else {
                            toastMessage("Error occured", 'error');
                        }
                    }
                });

            } else {
                if(message != ""){
                    toastMessage(message, 'error');
                }
            }
        }

    </script>
}